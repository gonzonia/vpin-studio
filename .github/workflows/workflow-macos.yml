name: Build MacOS Client

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  mac-app-build:
    name: mac-app-build
    runs-on: macos-15

    steps:
      # Step 1: Checkout the repository
      - name: Checkout VPin Studio
        uses: actions/checkout@v3

      - name: Checkout Popper Client Repo
        uses: actions/checkout@v3
        with:
          repository: syd711/vpin-studio-popper-client
          path: ./vpin-studio-popper-client
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Checkout Popper Client Repo
        uses: actions/checkout@v3
        with:
          repository: syd711/vpin-mania-rest-client
          path: ./vpin-mania-rest-client
          token: ${{ secrets.ACCESS_TOKEN }}        

      # Step 2: Set up Zulu OpenJDK 17
      - name: Set up Zulu JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
          architecture: 'aarch64'

      # Step 3: Install Maven and dependencies
      #Zulu 11 does not include jpackage, need to install it
     # - name: Install Dependencies
     #   run: |
     #     brew update
     #     brew install maven  
     #     brew install openjdk@17 # Ensure Zulu JDK 17 is installed on macOS

      # Step 4: Build the Java application
      - name: Run maven build for vpin mania rest client
        working-directory: ./vpin-mania-rest-client
        run: mvn clean install -DskipTests

      - name: Run maven build for Assets API
        working-directory: ./vpin-connector-assets
        run: mvn clean install -DskipTests

      - name: Run maven build for popper client
        working-directory: ./vpin-studio-popper-client
        run: mvn clean install -DskipTests

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
     
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean package -DskipMacOSBuild=false -DmacOSBuild=true -DskipTests

         
      # Step 5: Prepare Java runtime by unzipping
      - name: Prepare Jave Runtime
        working-directory: .
        run: |
          tar -xzf zulu11.72.19-ca-fx-jre11.0.23-macosx_aarch64.tar.gz

      # Step 6: Build Directory Structure
      - name: Build structure for packaging
        working-directory: .
        run: |
          mkdir -p ./mac-build
          cp ./vpin-studio-ui/target/vpin-studio-ui.jar ./mac-build
          cp -R ./mac-package/package ./mac-build
          cp -R ./mac-package/VpinStudio.icns ./mac-build
          
       - name: Set Release Version
        id: set-release-version
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
        run:  | 
          $version = mvn "--batch-mode" org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate "-Dexpression=project.version" "-q" "-DforceStdout"
          echo "::set-output name=version::${version}"

    
          
      
      
      # Step 7: Package the Java application as a macOS .app bundle
      #The jpackage config needs to be updated to properly reference the locations of the files.
      #jpackage @jpackage_config.txt
      - name: Package as macOS App
        working-directory: ./mac-build
        run: |
          echo "Github Run Number = ${{ github.run_number }}"
          echo "Version - ${{ steps.set-release-version.outputs.version }}"
          
          #echo "ls . results"
          #ls -al .
          #echo "ls .. results"
          #ls -al ..          
          #echo "ls package results"
          #ls -al package
          #echo "ls package/macos results"
          #ls -al package/macos
          jpackage --name VPin-Studio --input . --app-version 3.12.4 --main-jar vpin-studio-ui.jar --main-class de.mephisto.vpin.ui.Launcher --resource-dir package/macos --type app-image  --icon VpinStudio.icns  --dest ../ --runtime-image ../zulu11.72.19-ca-fx-jre11.0.23-macosx_aarch64/zulu-11.jre
          #check to see if the jpackage worked.
          #echo "ls -al ../VPin-Studio.app"
          #ls -al ../VPin-Studio.app
          #echo "ls -al ../VPin-Studio.app/Contents"
          #ls -al ../VPin-Studio.app/Contents
          
      # Step 8: Zip the .app bundle for easy distribution
      #Update for correct location
      - name: Zip macOS .app Bundle
        working-directory: ./
        run: |
          echo "ls ."
          ls -al .  
          zip -r VPin-Studio-MacOS.zip VPin-Studio.app

      # Step 9: Upload the .app zip file as an artifact
       #Update for correct location
      - name: Upload macOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-build
          path: ./VPin-Studio-MacOS.zip
